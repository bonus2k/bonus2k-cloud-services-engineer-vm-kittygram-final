volumes:
  pg_data:
  static:
  media:

services:
  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s


  backend:
    build:
      context: ./backend
      args:
        BACKEND_WORKDIR: ${BACKEND_WORKDIR}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_URL: >-
        postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    ports:
      - "8000:8000"
    entrypoint: >
      sh -c "
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn backend.wsgi:application --bind 0.0.0.0:8000
      "
    volumes:
      - media:/${BACKEND_WORKDIR}/media
      - static:/${BACKEND_WORKDIR}/collected_static

    depends_on:
      postgres:
        condition: service_healthy


  frontend:
    build:
      context: ./frontend
      args:
        FRONTEND_WORKDIR: ${FRONTEND_WORKDIR}
    volumes:
      - static:/${FRONTEND_WORKDIR}/build

  gateway:
    build: ./nginx/
    ports:
      - "80:80"
    volumes:
      - static:/static
      - media:/media
    depends_on:
      - backend

