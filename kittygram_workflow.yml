#GitHub .github/workflows/build.yml
name: Build workflow

env:
  BACKEND_IMAGE: ${{ secrets.DOCKER_LOGIN }}/kitty_backend:latest
  FRONTEND_IMAGE: ${{ secrets.DOCKER_LOGIN }}/kitty_frontend:latest
  GATEWAY_IMAGE: ${{ secrets.DOCKER_LOGIN }}/kitty_gateway:latest

on:
  push:
    branches:
      - main

jobs:
  tests_backend:
    name: Testing Backend
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
      - name: Test with flake8
        run: python -m flake8 backend/

  tests_frontend:
    name: Testing Frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up nodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          cd frontend/
          npm ci
      - name: Test frontend
        run: |
          cd frontend/
          npm run test

  build_backend_and_push_to_docker_hub:
    name: Push Backend Docker Image to DockerHub
    runs-on: ubuntu-latest
    needs: tests_backend
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          build-args: |
            FRONTEND_WORKDIR=${{ env.BACKEND_WORKDIR }}
          push: true
          tags: ${{ env.BACKEND_IMAGE }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_LOGIN }}/kitty_backend:cache
          cache-to: type=inline

  build_frontend_and_push_to_docker_hub:
    name: Push Frontend Docker Image to DockerHub
    runs-on: ubuntu-latest
    needs: tests_frontend
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          build-args: |
            FRONTEND_WORKDIR=${{ env.FRONTEND_WORKDIR }}
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_LOGIN }}/kitty_frontend:cache
          cache-to: type=inline

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker Image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ env.GATEWAY_IMAGE }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_LOGIN }}/kitty_gateway:cache
          cache-to: type=inline
# GitHub .github/workflows/terraform.yml
name: Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select the Terraform action'
        required: true
        default: 'plan'
        options:
          - plan
          - apply
          - destroy

permissions:
  contents: write


jobs:
  terraform_plan:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'plan' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.3

      - name: Set up Yandex Cloud service account key
        working-directory: ./infra
        run: |
          echo "${{ secrets.YC_KEY_JSON }}" | base64 -d > ./authorized_key.json

      - name: Initialize Terraform
        working-directory: ./infra
        run: terraform init -backend-config="access_key=$ACCESS_KEY" -backend-config="secret_key=$SECRET_KEY"
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}

      - name: Run Plan
        working-directory: ./infra
        run: terraform plan
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_username: ${{ vars.VM_USER}}
          TF_VAR_ssh_key: ${{ secrets.VM_PUB_SSH_KEY}}

  terraform_destroy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'destroy' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.3

      - name: Set up Yandex Cloud service account key
        working-directory: ./infra
        run: |
          echo "${{ secrets.YC_KEY_JSON }}" | base64 -d > ./authorized_key.json

      - name: Initialize Terraform
        working-directory: ./infra
        run: terraform init -backend-config="access_key=$ACCESS_KEY" -backend-config="secret_key=$SECRET_KEY"
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}

      - name: Run Destroy
        working-directory: ./infra
        run: terraform destroy -auto-approve
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_username: ${{ vars.VM_USER}}
          TF_VAR_ssh_key: ${{ secrets.VM_PUB_SSH_KEY}}

  terraform_apply:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'apply' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.3
          terraform_wrapper: false

      - name: Set up Yandex Cloud service account key
        working-directory: ./infra
        run: |
          echo "${{ secrets.YC_KEY_JSON }}" | base64 -d > ./authorized_key.json

      - name: Initialize Terraform
        working-directory: ./infra
        run: terraform init -backend-config="access_key=$ACCESS_KEY" -backend-config="secret_key=$SECRET_KEY"
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}

      - name: Run Apply
        working-directory: ./infra
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_username: ${{ vars.VM_USER}}
          TF_VAR_ssh_key: ${{ secrets.VM_PUB_SSH_KEY}}
        run: |
          terraform apply -auto-approve

      - name: Save External IP
        working-directory: ./infra
        run: |
          echo "VM_ADDRESS=$(terraform output -raw external_ip)" >> $GITHUB_ENV

      - name: Notify on success
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            🟢 *Created VM for Kittygram completed successfully!* 🎉
            *Server:* ${{ env.VM_ADDRESS }}

      - name: Run Deploy Workflow
        run: |
          curl -X POST \
          -H "Accept: application/vnd.github.everest-preview+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{"event_type": "terraform-workflow"}'
#GitHub  .github/workflows/deploy.yml
name: Deploy workflow

on:
  repository_dispatch:
    types: [terraform-workflow]
  workflow_dispatch:

jobs:
  check_vm:
    name: Check VM for Kittygram
    runs-on: ubuntu-latest
    outputs:
      vm_address: ${{ steps.save_vm.outputs.vm_address }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.3
          terraform_wrapper: false

      - name: Set up Yandex Cloud service account key
        working-directory: ./infra
        run: |
          echo "${{ secrets.YC_KEY_JSON }}" | base64 -d > ./authorized_key.json

      - name: Initialize Terraform
        working-directory: ./infra
        run: terraform init -backend-config="access_key=$ACCESS_KEY" -backend-config="secret_key=$SECRET_KEY"
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}

      - name: Save External IP
        id: save_vm
        working-directory: ./infra
        run: |
          VM_ADDRESS=$(terraform output -raw external_ip)
          if [[ -z "$VM_ADDRESS" ]]; then
            echo "❌ VM_ADDRESS is empty"
            exit 1
          fi
          echo "vm_address=$VM_ADDRESS" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy Kittygram to VM
    runs-on: ubuntu-latest
    needs: check_vm
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Generate `.env` file
        run: |
          echo "POSTGRES_HOST=${{ vars.POSTGRES_HOST }}" > .env
          echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_PORT=${{ vars.POSTGRES_PORT }}" >> .env
          echo "BACKEND_IMAGE=${{ secrets.BACKEND_IMAGE }}" >> .env
          echo "FRONTEND_IMAGE=${{ secrets.FRONTEND_IMAGE }}" >> .env
          echo "GATEWAY_IMAGE=${{ secrets.GATEWAY_IMAGE }}" >> .env

      - name: Create directory for compose file
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.check_vm.outputs.vm_address }}
          username: ${{ vars.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            sudo mkdir -p ${{ vars.VM_APP_DIR }}
            sudo chown "$USER":"$USER" ${{ vars.VM_APP_DIR }}
            ls -alt ${{ vars.VM_APP_DIR }}
            echo "Direcory created successfull."

      - name: Copy docker-compose.yml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ needs.check_vm.outputs.vm_address }}
          username: ${{ vars.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: ".env, ${{ vars.COMPOSE_FILE }}"
          target: ${{ vars.VM_APP_DIR }}

      - name: Set permissions for `.env` file on remote server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.check_vm.outputs.vm_address }}
          username: ${{ vars.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            cd ${{ vars.VM_APP_DIR }}
            chmod 600 .env
            echo "Permissions for .env set successfully."

      - name: Wait for cloud-init to complete
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.check_vm.outputs.vm_address }}
          username: ${{ vars.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            echo "Waiting for cloud-init to complete..."
            timeout=300 
            elapsed=0
            until cloud-init status --wait 2>&1 | grep -q "status: done"; do
              if [ "$elapsed" -ge "$timeout" ]; then
              echo "Cloud-init did not complete within $timeout seconds. Exiting."
              exit 1
              fi
              echo "Cloud-init is still running, waiting 10 seconds..."
              sleep 10
              elapsed=$((elapsed + 10))
            done
            echo "Cloud-init has completed."
      

      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        env:
          COMPOSE_FILE: ${{ vars.COMPOSE_FILE }}
        with:
          host: ${{ needs.check_vm.outputs.vm_address }}
          username: ${{ vars.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          envs: COMPOSE_FILE
          script: |
            cd ${{ vars.VM_APP_DIR }}
            pwd
            docker compose -f $COMPOSE_FILE pull
            docker compose -f $COMPOSE_FILE down
            docker compose -f $COMPOSE_FILE up -d
            docker compose -f $COMPOSE_FILE exec backend python manage.py makemigrations
            docker compose -f $COMPOSE_FILE exec backend python manage.py migrate
            docker compose -f $COMPOSE_FILE exec backend python manage.py collectstatic --noinput
            docker compose -f $COMPOSE_FILE exec backend cp -r /collected_static/. /static/
            docker compose -f $COMPOSE_FILE exec frontend cp -r /build/. /static/

  send_message:
    name: Send Message to Maintainer
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.deploy.result == 'success' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            🟢 *Kittygram deployment completed successfully!* 🎉
            *Deploy server:* ${{ needs.check_vm.outputs.vm_address }}
            *Commit by:* ${{ github.actor }}

      - name: Notify on failure
        if: ${{ needs.deploy.result == 'failure' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            🔴 *CI/CD Pipeline Failed!*
            *Workflow:* ${{ github.workflow }}

  copy_workflows:
    name: Push Latest Workflows
    runs-on: ubuntu-latest
    needs: deploy
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Pull latest changes from remote
        run: |
          git checkout main
          git pull

      - name: Add file and commit changes
        env:
          VM_ADDRESS: ${{ needs.check_vm.outputs.vm_address }}
        run: |
          cp .github/workflows/build.yml kittygram_workflow.yml
          cat .github/workflows/terraform.yml >> kittygram_workflow.yml
          cat .github/workflows/deploy.yml >> kittygram_workflow.yml
          cat tests.template
          echo $VM_ADDRESS
          VM_ADDRESS=$VM_ADDRESS envsubst < tests.template > tests.yml
          cat tests.yml
          git add kittygram_workflow.yml tests.yml
          git commit -m "Added kittygram_workflow.yml after successful deploy"

      - name: Push changes to repository
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
