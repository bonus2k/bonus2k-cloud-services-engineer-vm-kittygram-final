# .github/workflows/main.yml
name: Main workflow

env:
  BACKEND_IMAGE: ${{ secrets.DOCKER_LOGIN }}/kitty_backend:latest
  FRONTEND_IMAGE: ${{ secrets.DOCKER_LOGIN }}/kitty_frontend:latest
  GATEWAY_IMAGE: ${{ secrets.DOCKER_LOGIN }}/kitty_gateway:latest

on:
  push:
    branches:
      - main

jobs:
  tests_backend:
    name: Testing Backend
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
      - name: Test with flake8
        run: python -m flake8 backend/

  tests_frontend:
    name: Testing Frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up nodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          cd frontend/
          npm ci
      - name: Test frontend
        run: |
          cd frontend/
          npm run test

  build_backend_and_push_to_docker_hub:
    name: Push Backend Docker Image to DockerHub
    runs-on: ubuntu-latest
    needs: tests_backend
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          build-args: |
            FRONTEND_WORKDIR=${{ env.BACKEND_WORKDIR }}
          push: true
          tags: ${{ env.BACKEND_IMAGE }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_LOGIN }}/kitty_backend:cache
          cache-to: type=inline

  build_frontend_and_push_to_docker_hub:
    name: Push Frontend Docker Image to DockerHub
    runs-on: ubuntu-latest
    needs: tests_frontend
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          build-args: |
            FRONTEND_WORKDIR=${{ env.FRONTEND_WORKDIR }}
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_LOGIN }}/kitty_frontend:cache
          cache-to: type=inline

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker Image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ env.GATEWAY_IMAGE }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_LOGIN }}/kitty_gateway:cache
          cache-to: type=inline

  deploy:
    name: Deploy Kittygram to VM
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Generate `.env` file
        run: |
          echo "POSTGRES_HOST=${{ vars.POSTGRES_HOST }}" > .env
          echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_PORT=${{ vars.POSTGRES_PORT }}" >> .env
          echo "BACKEND_IMAGE=${{ env.BACKEND_IMAGE }}" >> .env
          echo "FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }}" >> .env
          echo "GATEWAY_IMAGE=${{ env.GATEWAY_IMAGE }}" >> .env


      - name: Copy docker-compose.yml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.VM_ADDRESS }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: ".env, ${{ vars.COMPOSE_FILE }}"
          target: ${{ vars.VM_APP_DIR }}

      - name: Set permissions for `.env` file on remote server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.VM_ADDRESS }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            cd ${{ vars.VM_APP_DIR }}
            chmod 600 .env
            echo "Permissions for .env set successfully."

      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        env:
          VM_APP_DIR: ${{ vars.VM_APP_DIR }}
          COMPOSE_FILE: ${{ vars.COMPOSE_FILE }}
        with:
          host: ${{ vars.VM_ADDRESS }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          envs: VM_APP_DIR,COMPOSE_FILE
          script: |    
            cd "$VM_APP_DIR"
            sudo docker compose -f "$COMPOSE_FILE" pull
            sudo docker compose -f "$COMPOSE_FILE" down
            sudo docker compose -f "$COMPOSE_FILE" up -d
            sudo docker compose -f "$COMPOSE_FILE" exec backend python manage.py makemigrations
            sudo docker compose -f "$COMPOSE_FILE" exec backend python manage.py migrate
            sudo docker compose -f "$COMPOSE_FILE" exec backend python manage.py collectstatic --noinput
            sudo docker compose -f "$COMPOSE_FILE" exec backend cp -r /collected_static/. /static/
            sudo docker compose -f "$COMPOSE_FILE" exec frontend cp -r /build/. /static/

  send_message:
    name: Send Message to Maintainer
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Notify on success
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ðŸŸ¢ *Kittygram deployment completed successfully!* ðŸŽ‰
            *Deploy server:* `${{ vars.VM_ADDRESS }}`
            *Commit by:* `${{ github.actor }}`
            *Commit message:* `${{ github.event.commits[0].message }}`
            [View Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

      - name: Notify on failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ðŸ”´ *Kittygram deployment failed!* ðŸš¨
            *Commit by:* `${{ github.actor }}`
            *Commit message:* `${{ github.event.commits[0].message }}`
            [View Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})


  copy_workflows:
    name: Push Latest Workflows
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Pull latest changes from remote
        run: |
          git checkout main
          git pull

      - name: Add file and commit changes
        run: |
          cp .github/workflows/main.yaml kittygram_workflow.yml
          git add kittygram_workflow.yml
          git commit -m "Added kittygram_workflow.yml after successful deploy"

      - name: Push changes to repository
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main


